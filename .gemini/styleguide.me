# 프로젝트 코딩 컨벤션 및 디자인 원칙

## 1. 일반 원칙 (General Principles)

### 1.1 SOLID 원칙 준수
* **단일 책임 원칙 (SRP)**: 클래스나 함수는 오직 하나의 책임만 가져야 합니다.
* **개방-폐쇄 원칙 (OCP)**: 기존 코드를 수정하지 않고도 확장할 수 있도록 설계합니다.
* **리스코프 치환 원칙 (LSP)**: 자식 클래스는 부모 클래스의 기능을 온전히 대체할 수 있어야 합니다.
* **인터페이스 분리 원칙 (ISP)**: 클라이언트는 자신이 사용하지 않는 인터페이스에 의존하지 않아야 합니다.
* **의존성 역전 원칙 (DIP)**: 고수준 모듈은 저수준 모듈에 의존하지 않고, 추상화에 의존해야 합니다.

### 1.2 클린 코드 (Clean Code)
* 변수, 함수, 클래스 이름은 의도를 명확하게 드러내도록 작성합니다.
* 함수는 하나의 기능만 수행하고 짧게 유지합니다.
* 매직 넘버(Magic Number)나 하드코딩된 문자열을 사용하지 않고 상수를 활용합니다.

## 2. 백엔드 개발 가이드라인 (Spring)

### 2.1 아키텍처 및 API
* **계층형 아키텍처**를 따릅니다: `Controller` -> `Service` -> `Repository`.
* **RESTful API**를 설계하며, HTTP 동사를 올바르게 사용합니다.
* 대량의 데이터 처리 시 페이징과 정렬 옵션을 제공합니다.
* 데이터 유효성 검사는 **서버에서 항상** 수행합니다.

### 2.2 오류 처리 및 보안
* **전역 예외 처리**: `@ControllerAdvice`를 활용하여 예외를 일관되게 처리합니다.
* **환경 변수**: 민감한 정보는 환경 변수로 관리합니다.
* **보안 취약점**: SQL Injection, XSS 등의 공격 방어 코드를 작성합니다.

### 2.3 테스트
* **단위 테스트 (Unit Test)**: **Service 계층**의 비즈니스 로직에 대한 단위 테스트를 작성합니다. 외부 의존성(Repository 등)은 Mocking 처리합니다.
* **통합 테스트 (Integration Test)**: `Controller`와 `Service` 계층을 통합한 테스트를 작성하여 전체적인 동작 흐름을 검증합니다.
* **테스트 커버리지**: **핵심 비즈니스 로직**에 대한 테스트 커버리지를 80% 이상 유지하도록 노력합니다.
* **테스트 코드 명확성**: 테스트 코드도 프로덕션 코드만큼 명확하고 읽기 쉽게 작성합니다. (`given-when-then` 패턴 사용 권장)